p=ttest$p.value
txt = paste("t(",df,")=",t,"p=",round(p,3))
if(ttest$p.value<.001){
p="<0.001"
txt = paste("t(",df,")=",t,"p=",p)
}
return(txt)
}
reportt(tmp)
reportt = function(ttest){
t=round(ttest$statistic,3)
df=ttest$parameter
p=ttest$p.value
txt = paste("t(",df,")=",t,"p=",round(p,3))
if(ttest$p.value<.001){
p="<0.001"
txt = paste("t(",df,")=",t,"p=",p,sep="")
}
return(txt)
}
reportt(tmp)
# tests of distance from optimal in blocks
## no rew and rew are better than yoked in last block for RR
tmp=t.test(datblock$distFromOpt[datblock$cid==1 & datblock$bid==10],datblock$distFromOpt[datblock$cid==4 & datblock$bid==10],var.equal = TRUE)
reportt(tmp)
140000/8
#dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181113/Pilot/data.csv")
dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181116/data.csv")
dat$bs =as.factor(dat$bs)
dat$sid=as.factor(dat$sid)
bids = unique(dat$bs)
sids = unique(dat$sid); sids
length(sids) # n
min(dat$tsas[dat$rs==1 & dat$tsas>1]) # min time since reward for slow rewarded responses >=2?
plot(dat$tsas[dat$rs==1 & dat$tsas>1])
abline(h=2)
# colors for plotting;
cols = rainbow(length(unique(dat$sid)))
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# check for last part of last block -- to check learning
# get number of irts >2s in first and last blocks
dat$above2 = dat$tsas >= 2;
tmp = aggregate(dat[,c('above2','b3')],by=list(sid=dat$sid,bid=dat$bs),FUN=sum);
# test for a difference (BAD TEST RN -- testing between blocks1 and 3 which might not matter?, only did this so it would run.)
t.test(tmp$above2[tmp$bid==1],tmp$above2[tmp$bid==3],paired = TRUE)
tmp$above2[tmp$bid==1]
tmp$above2[tmp$bid==3]
tmp$above2[tmp$bid==2]
#dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181113/Pilot/data.csv")
dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181116/data.csv")
#dat = read.csv("../Data Files/data.csv")
dat$bs =as.factor(dat$bs)
dat$sid=as.factor(dat$sid)
bids = unique(dat$bs)
sids = unique(dat$sid); sids
length(sids) # n
# for checking participants in...
#sum(as.numeric(as.character(sids))<22)+1 # AMAO then U
#sum(as.numeric(as.character(sids))>=22)-1 # U then AMAO
# find expression for experiment time...
# dat$bts = t - bt
# dat$bts - dat$ts = -bt
# abs(dat$bts - dat$ts) = bt
# expt=
# dat$bts+ last time in previous block...?
# checks
# a slow response (tsa>1) should not be rewarded within 2s of a
min(dat$tsas[dat$rs==1 & dat$tsas>1]) # min time since reward for slow rewarded responses >=2?
plot(dat$tsas[dat$rs==1 & dat$tsas>1])
abline(h=2)
# dat[dat$rs==1 & dat$tsrs>1 & dat$tsrs<2,] # for more in depth checking of things
# which(dat$rs==1 & dat$tsrs>1 & dat$tsrs<2) # to get indecies to check nearby responses
# no reward intervals should be less than 2 in the last block
#min(dat$tsrs[dat$bs==4 & dat$rs==1]) # min rewarded time since a reward
# colors for plotting;
cols = rainbow(length(unique(dat$sid)))
# # plot cumulative reward for each subject
# plot(c(0,max(dat$ts)),c(min(dat$cumrs),max(dat$cumrs)),type='n',
#      main = "Cumulative reward across blocks and subjects",
#      xlab="Experiment Time",
#      ylab="Cumulative Reward")
# for (si in sids){ for(bi in bids){
# tmpidx = dat$sid==si & dat$bs==bi;
# lines(dat$ts[tmpidx],dat$cumrs[tmpidx],col=as.numeric(dat$bs[tmpidx]))    # blocks (first two latent)
# }}
#
# # plot the criterion for changing phases
# plot(c(0,max(dat$ts)),c(0,1),type='n',
#      main = "Train Criterion",
#      xlab="Experiment Time",
#      ylab="proportion of fast responses")
# for (si in sids){ for(bi in bids){
# tmpidx = dat$sid==si & dat$bs==bi;
# lines(dat$ts[tmpidx],dat$pfasts[tmpidx],col=as.numeric(dat$bs[tmpidx]))    # blocks (first two latent)
# }}
# abline(h=.8)
#
# # plot tsas in each condition;
# plot(c(0,max(dat$ts)),c(0,7),type='n',
#      main = "TSA",
#      xlab="Experiment Time",
#      ylab="Time since action")
# for (si in sids){ for(bi in bids){
# tmpidx = dat$sid==si & dat$bs==bi;
# lines(dat$ts[tmpidx],dat$tsas[tmpidx],col=as.numeric(dat$bs[tmpidx]))    # blocks (first two latent)
# }}
# abline(h=.5)
# abline(h=2)
# general checks;
# IRTs by block and subject
require(ggplot2)
# ggplot(data.frame(x=as.factor(dat$bs),y=dat$tsas,fill=dat$sid),aes(x=x, y=y, fill=fill)) +
#        geom_boxplot() + theme(legend.position="none") + geom_abline(slope=c(0,0),intercept = c(.5,2)) +
#        labs(x="Block",y="IRT",title="IRT distributions by subject and block")
# # check response distributions in terms of time between rewards by condition and subject
# ggplot(data.frame(x=as.factor(dat$bs),y=dat$tsrs,fill=dat$sid),aes(x=x, y=y, fill=fill)) +
#        geom_boxplot() + labs(x="Block",y="Time Since Reward") + theme(legend.position="none")
# # check reward delivery in terms of time since rewards by condition and subject
# ggplot(data.frame(x=as.factor(dat$bs[dat$rs==1]),y=dat$tsrs[dat$rs==1],fill=dat$sid[dat$rs==1]),aes(x=x, y=y, fill=fill)) +
#        geom_boxplot() + labs(x="Block",y="Time Since Reward for Rewarded Responses") + theme(legend.position="none")
# # check reward delivery in terms of time since actions by condition and subject
# ggplot(data.frame(x=as.factor(dat$bs[dat$rs==1]),y=dat$tsas[dat$rs==1],fill=dat$sid[dat$rs==1]),aes(x=x, y=y, fill=fill)) +
#        geom_boxplot() + labs(x="Block",y="Time Since Action for Rewarded Responses") + theme(legend.position="none")
# specific checks;
# did subject 2 respond fast enough for the fast rewards?
#tmpidx = dat$sid==4 & dat$ts<300
#plot(dat$ts[tmpidx],dat$tsas[tmpidx])
#abline(h=.5)
#abline(h=2)
# plot tsas in each condition;
# for (si in sids){
# tmpidx = dat$sid==si & dat$bs==4; # this subject, last block
# plot(dat$ts[tmpidx],dat$tsas[tmpidx],col=as.numeric(dat$bs[tmpidx]),    # blocks (first two latent)
#      main = paste("TSA, s:", si,sep=""),
#      xlab="Experiment Time",
#      ylab="Time since action",
#      ylim=c(0,5))
# lines(dat$ts[tmpidx],dat$tsas[tmpidx],col=as.numeric(dat$bs[tmpidx]))
# abline(h=1,lty=2)
# abline(h=2)
# }
# recover proportion of fast and slow responses across time
# checks
# a slow response (tsa>1) should not be rewarded within 2s of a
min(dat$tsas[dat$rs==1 & dat$tsas>1]) # min time since reward for slow rewarded responses >=2?
}
for (si in sids){
tmpidx = dat$sid==si & dat$bs==4; # this subject, last block
plot(dat$ts[tmpidx],dat$tsas[tmpidx],col=as.numeric(dat$bs[tmpidx]),    # blocks (first two latent)
main = paste("TSA, s:", si,sep=""),
xlab="Experiment Time",
ylab="Time since action",
ylim=c(0,5))
lines(dat$ts[tmpidx],dat$tsas[tmpidx],col=as.numeric(dat$bs[tmpidx]))
abline(h=1,lty=2)
abline(h=2)
}
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# check for last part of last block -- to check learning
head(tmp)
# test for a difference (BAD TEST RN -- testing between blocks1 and 3 which might not matter?, only did this so it would run.)
t.test(tmp$fracAbove2[tmp$bid==2],tmp$fracAbove2[tmp$bid==3],paired = TRUE)
# get number of irts >2s in first and last blocks
dat$above2 = dat$tsas >= 2;
tmp = aggregate(dat[,c('above2','b3')],by=list(sid=dat$sid,bid=dat$bs),FUN=sum);
head(tmp)\
head(tmp)
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
?density
density(tmp$fracAbove2)
tmpd=density(tmp$fracAbove2)
plot(tmpd,type="l")
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
?hist
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",)
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",
probability=TRUE)
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",
probability=TRUE)
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",
freq=FALSE)
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants")
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.2,.2,.2))
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
hist(tmp$fracAbove2,10,
main="", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
main="main")
hist(tmp$fracAbove2,10,
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
head(tmp)
tmp$b3
# same, but for phase 2
dat$below2inb2 = dat$bs==3 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,10,
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
tmp$b2
# same, but for phase 2
dat$below2inb2 = dat$bs==2 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,10,
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,10,
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# check for last part of last block -- to check learning
# same, but for phase 2
dat$below2inb2 = dat$bs==2 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,10,
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# same, but for phase 2
dat$below2inb2 = dat$bs==2 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,10,
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
xlim=c(0,1))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# same, but for phase 2
dat$below2inb2 = dat$bs==2 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
xlim=c(0,1))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Distribution of Proportion of Rewarded Responses", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
# check for last part of last block -- to check learning
par(mfrow=c(1,3))
# prop slow in free response phase
dat$below2inb1 = dat$bs==1 & dat$tsas < 2;
dat$b1     = dat$bs==1;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb1','b1')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb1/tmp$b1);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Blocked Phase", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
xlim=c(0,1))
# prop slow in free response phase
dat$below2inb2 = dat$bs==2 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Blocked Phase", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
xlim=c(0,1))
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Training Phase", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
par(mfrow=c(1,1))
par(mfrow=c(1,3))
# prop slow in free response phase
dat$below2inb1 = dat$bs==1 & dat$tsas < 2;
dat$b1     = dat$bs==1;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb1','b1')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb1/tmp$b1);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Training Phase", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
xlim=c(0,1))
# prop slow in free response phase
dat$below2inb2 = dat$bs==2 & dat$tsas < 2;
dat$b2     = dat$bs==2;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb2','b2')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb2/tmp$b2);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Free Phase", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8),
xlim=c(0,1))
# get number of responses before first response above 2s in last phase
dat$below2inb3 = dat$bs==3 & dat$tsas < 2;
dat$b3     = dat$bs==3;
# number of resp below 2s vs number of resp
tmp = aggregate(dat[,c('below2inb3','b3')],by=list(sid=dat$sid),FUN=sum);
tmp$fracAbove2 = (1-tmp$below2inb3/tmp$b3);
hist(tmp$fracAbove2,seq(0,1,.1),
main="Blocked Phase", xlab="Proportion of Latencies Above 2s",ylab="Number Of Participants",col=rgb(.8,.8,.8))
c(mean=mean(tmp$fracAbove2),sd=sd(tmp$fracAbove2))
par(mfrow=c(1,1))
# get number of irts >2s in first and last blocks
dat$above2 = dat$tsas >= 2;
tmp = aggregate(dat[,c('above2','b3')],by=list(sid=dat$sid,bid=dat$bs),FUN=sum);
# test for a difference (BAD TEST RN -- testing between blocks1 and 3 which might not matter?, only did this so it would run.)
t.test(tmp$fracAbove2[tmp$bid==2],tmp$fracAbove2[tmp$bid==3],paired = TRUE)
head(dat)
genders = c()
ages = c()
for(si in sids){
genders = c(genders,dat$sex[dat$sid==si][1])
ages = c(genders,dat$age[dat$sid==si][1])
}
genders
age
ages
dat$age
dat$sid
dat$age
dat$gender
dat$sed
dat$sex
dat$age
ages
sids
si
si
sids
dat$sids
dat$sid
sids
si
dat$sid==si
which(dat$sid==si)
dat$age[dat$sid==si][1]
dat$age[dat$sid==si]
dat$age[dat$sid==sids[1]]
dat$age[dat$sid==sids[2]]
dat$age[dat$sid==sids[3]]
dat$age[dat$sid==sids[4]]
dat$age[dat$sid==sids[5]]
dat$age[dat$sid==sids[6]]
dat$age[dat$sid==sids[7]]
#dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181113/Pilot/data.csv")
dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181116/data.csv")
#dat = read.csv("../Data Files/data.csv")
dat$bs =as.factor(dat$bs)
dat$sid=as.factor(dat$sid)
bids = unique(dat$bs)
sids = unique(dat$sid); sids
n = length(sids) # n
# get gender and age
genders = c()
ages = c()
for(si in sids){
genders = c(genders,dat$sex[dat$sid==si][1])
ages = c(genders,dat$age[dat$sid==si][1])
}
ages
genders = c()
ages = c()
for(si in sids){
genders = c(genders,dat$sex[dat$sid==si][1])
ages = c(ages,dat$age[dat$sid==si][1])
}
ages
genders
dat$sex
dat$sex[dat$sid==si][1]
si
genders
ages
#dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181113/Pilot/data.csv")
dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181116/data.csv")
#dat = read.csv("../Data Files/data.csv")
# note first age is '1', which I use when running myself -- so this data was discarded
dat = dat[dat$age!=1,]
dat$bs =as.factor(dat$bs)
dat$sid=as.factor(dat$sid)
bids = unique(dat$bs)
sids = unique(dat$sid); sids
n = length(sids) # n
# get gender and age
genders = c()
ages = c()
for(si in sids){
genders = c(genders,dat$sex[dat$sid==si][1])
ages = c(ages,dat$age[dat$sid==si][1])
}
# p female;
p_female = mean(genders==1)
ages
n
#dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181113/Pilot/data.csv")
dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181116/data.csv")
#dat = read.csv("../Data Files/data.csv")
# note first age is '1', which I use when running myself -- so this data was discarded
dat = dat[dat$age!=1,]
dat$bs =as.factor(dat$bs)
dat$sid=as.factor(dat$sid)
bids = unique(dat$bs)
sids = unique(dat$sid); sids
n = length(sids) # n
# get gender and age
genders = c()
ages = c()
conds = c()
for(si in sids){
genders = c(genders,dat$sex[dat$sid==si][1])
ages = c(ages,dat$age[dat$sid==si][1])
conds= c(conds,dat$cid[dat$sid==si][1])
}
# p female;
n_female = sum(genders==1)
mean_age = round(mean(ages),2)
sd_age   = round(sd(ages),2)
conds
#dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181113/Pilot/data.csv")
dat = read.csv("/Volumes/GoogleDrive/My Drive/CurrentDrive/LabWork/Results/Results Project U/v20181116/data.csv")
#dat = read.csv("../Data Files/data.csv")
# note first age is '1', which I use when running myself -- so this data was discarded
dat = dat[dat$age!=1,]
dat$bs =as.factor(dat$bs)
dat$sid=as.factor(dat$sid)
bids = unique(dat$bs)
sids = unique(dat$sid); sids
n = length(sids) # n
# get gender and age
genders = c()
ages = c()
for(si in sids){
genders = c(genders,dat$sex[dat$sid==si][1])
ages = c(ages,dat$age[dat$sid==si][1])
}
# p female;
n_female = sum(genders==1)
mean_age = round(mean(ages),2)
sd_age   = round(sd(ages),2)
length(sids)
max(sids)
max(sid)
61-n
(61-n)/61
install.packages("blogdown",dependencies = TRUE)
dir()
cd
dir()
setwd("~/git/macstrelioff.github.io")
blogdown::new_site(theme = 'thingsym/hugo-theme-techdoc')
install.packages("blogdown",dependencies = TRUE)
install.packages("blogdown", dependencies = TRUE)
install.packages("blogdown", dependencies = TRUE)
