# all(ckvec$km[(ckvec$sid %% 4 == 3) & (ckvec$sid %% 4 == 0)]==28) # should be 'TRUE'
#
# ## Check that rewards are obtained from the modified action only when modifying action used correctly
# any(dat$rs[(dat$amirt<2) | (dat$amirt>5) | (dat$tsao>5)]==1) # should be FALSE
# # dat[which((dat$amirt<2) | (dat$amirt>5) | (dat$tsao>5)),]
## Check prop. of time and responses while in reward avilable state, across time or blocks?
# indicator for reward state
# irewstate = (2<=dat$amirt) & (dat$amirt<=5) & (dat$tsao<=5)
# global time indecies
# tidx = order(dat$ts)
# then average smooth this by subjects and by condition?
# for(si in sids){
# tmpidx = dat$sids==si
# tidx = order(dat$ts[tmpidx])
# plot(dat$ts[tmpidx][tidx],irewstate[tmpidx][tidx],main=c("Prop of time in high reward state",si))
# tmpsmooth=lowess(as.numeric(irewstate[tmpidx][tidx]),f=50/length(irewstate[tmpidx]))
# lines(dat$ts[tmpidx][tidx],tmpsmooth$y)
# }
# get dataframe for tests using aggregate
# prop optimal and dist from optimal by participant, bin, and block
datbin  =aggregate(dat[,c('Iopt','distFromOpt')],by=list(sid=dat$sids,cid=dat$cid,bid=dat$bs,bin10s=dat$bin10s),FUN=mean)
datblock=aggregate(dat[,c('Iopt','distFromOpt')],by=list(sid=dat$sids,cid=dat$cid,bid=dat$bs),FUN=mean)
bin_sum =aggregate(dat[dat$ams==1,c('Iopt','distFromOpt')],by=list(sid=dat$sids[dat$ams==1],
cid=dat$cid[dat$ams==1],bid=dat$bs[dat$ams==1],bin10s=dat$bin10s[dat$ams==1]),FUN=sum)
# visual checks;
# plot(datblock$Iopt~jitter(datblock$bid,factor=.5),col=datblock$cid)
# plot(datblock$distFromOpt~jitter(datblock$bid,factor=.5),col=datblock$cid)
# data for visualizations
bin_means   = aggregate(  datbin[,c('Iopt','distFromOpt')],by=list(cid=datbin$cid,bid=datbin$bid,bin10s=datbin$bin10s),FUN=mean)
bin_sds     = aggregate(  datbin[,c('Iopt','distFromOpt')],by=list(cid=datbin$cid,bid=datbin$bid,bin10s=datbin$bin10s),FUN=sd)
block_means = aggregate(datblock[,c('Iopt','distFromOpt')],by=list(cid=datblock$cid,bid=datblock$bid),FUN=mean)
block_sds   = aggregate(datblock[,c('Iopt','distFromOpt')],by=list(cid=datblock$cid,bid=datblock$bid),FUN=sd)
# dist from opt = 0 if in 2-5, 2-IRT if <2, IRT-5 if >5
sum_rewc = aggregate(dat[dat$ams==1,c('Iopt','distFromOpt')],by=list(sid=dat$sids[dat$ams==1],cid=dat$cid[dat$ams==1],bid=dat$bs[dat$ams==1]),FUN=sum)
sum_means= aggregate(sum_rewc[,c('Iopt','distFromOpt')],by=list(cid=sum_rewc$cid,bid=sum_rewc$bid),FUN=mean)
sum_sds  = aggregate(sum_rewc[,c('Iopt','distFromOpt')],by=list(cid=sum_rewc$cid,bid=sum_rewc$bid),FUN=sd)
bin_sum_means= aggregate(bin_sum[,c('Iopt','distFromOpt')],by=list(cid=bin_sum$cid,bid=bin_sum$bid,bin10s=bin_sum$bin10s),FUN=mean)
bin_sum_sds  = aggregate(bin_sum[,c('Iopt','distFromOpt')],by=list(cid=bin_sum$cid,bid=bin_sum$bid,bin10s=bin_sum$bin10s),FUN=sd)
# convert sd to SE
bin_sds[,  c('Iopt','distFromOpt')]  =  bin_sds[,c('Iopt','distFromOpt')]/sqrt(25-1) # 25 in each condition here
block_sds[,c('Iopt','distFromOpt')]  =block_sds[,c('Iopt','distFromOpt')]/sqrt(25-1) # 25 in each condition here
sum_sds[,  c('Iopt','distFromOpt')]  =  sum_sds[,c('Iopt','distFromOpt')]/sqrt(25-1) # 25 in each condition here
bin_sum_sds[,  c('Iopt','distFromOpt')]  =  bin_sum_sds[,c('Iopt','distFromOpt')]/sqrt(25-1) # 25 in each condition here
# maybe shade the back for blocks, and use different colors for different conditions?
# also compute time within blocks, instead of since start of task?
# Chunk 3: AMAOIRT Fig DistFromOpt
# c(0,0,0,0)
par(mfrow=c(1,1),omi=omi4,mgp=c(tline,atline,axline),mar=mar)
# fig params
cols=c(rgb(0,0,0,.8),rgb(1,0,0,.8),rgb(0,.8,0,.8),rgb(0,0,1,.8))
# error bar params
sesz = 2; ll = .2;
# helper functions
plotStartVals = function(m,s,col){
points(  0,   m,cex=1.5,col=col,pch=20)
segments(0,   m+s,0,   m-s,col=col,lwd=sesz)
segments(0-ll,m-s,0+ll,m-s,col=col,lwd=sesz)
segments(0-ll,m+s,0+ll,m+s,col=col,lwd=sesz)
}
plotLines = function(m,s,col){
sems = c(m+s,rev(m-s))
lines(m,col=col,lwd=2)
polygon(c(bs,rev(bs)), sems,col=adjustcolor(col,alpha=.2), border = NA)
}
# Dist From Opt
# initialize figure
plot(x=NA,y=NA,type="n",ylim=c(0,3.5),xlim=c(0,10),ylab="",xlab="",main="Distance From Optimal R values")
title(ylab="Distance From Optimal",line=alline)#cex.lab=ftsz,
title(xlab="Block",line=alline)#cex.lab=ftsz,
# plot first 10s for each condition;
for (ci in cids){
idx = bin_means$cid==ci & bin_means$bid==1 & bin_means$bin10s=='(0,10]';
plotStartVals(bin_means$distFromOpt[idx],bin_sds$distFromOpt[idx],cols[ci]) # no reward
}
# add the main lines;
for(ci in cids){
idx = block_means$cid==ci
plotLines(block_means$distFromOpt[idx],block_sds$distFromOpt[idx],cols[ci]) # no reward
}
legend(x=2,y=3.4,c("No Reward","Reward"),lty=1,lwd=2,
col=c(cols[1],cols[2]))
# return to 1 figure
par(mfrow=c(1,1))
head(datblock)
# no rew and rew are better for last than first block for IRT
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==1 & datblock$bid==10,'distFromOpt']) # p<.001
# tests of distance from optimal in blocks
## no rew and rew are better than yoked in last block for RR
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==1 & datblock$bid==10,'distFromOpt']) # p<.001
datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt']
mean(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'])
# tests of distance from optimal in blocks
## no rew and rew are better than yoked in last block for RR
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==1 & datblock$bid==10,'distFromOpt'])
mean(datblock[datblock$cid==1 & datblock$bid==10,'distFromOpt'])
t.test(datblock[datblock$cid==2 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==2 & datblock$bid==10,'distFromOpt']) # p=.012
# -- rew higher p=.012
# ## no difference between groups in the first block for either RR or IRT
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==2 & datblock$bid==1,'distFromOpt'])
head(datbin)
# tests of distance from optimal in 10s bins
## no rew and rew are better for last than first 10s bin for RR
t.test(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==1 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'])
datbin$bin10s[1]
# tests of distance from optimal in 10s bins
## no rew and rew are better for last than first 10s bin for RR
t.test(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==1 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'],paired=TRUE)
datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt']
length(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'])
length(datbin[datbin$cid==1 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'])
# TODO: repeated measures ANOVA
# tests of distance from optimal in blocks
## no rew better, and rew worse in last block vs first block
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==1 & datblock$bid==10,'distFromOpt'],paired=TRUE)
# -- no reward lower,  p<.001
t.test(datblock[datblock$cid==2 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==2 & datblock$bid==10,'distFromOpt'],paired=TRUE)
# TODO: repeated measures ANOVA
# tests of distance from optimal in blocks
## no rew better, and rew worse in last block vs first block
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==1 & datblock$bid==10,'distFromOpt'],paired=TRUE)
# -- no reward lower,  p<.001
t.test(datblock[datblock$cid==2 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==2 & datblock$bid==10,'distFromOpt'],paired=TRUE)
# -- rew higher p=.012
# ## no difference between groups in the first block for either RR or IRT
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==2 & datblock$bid==1,'distFromOpt'])
# tests of distance from optimal in 10s bins
## no rew and rew are better for last than first 10s bin for RR
t.test(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==1 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'])
# -- no rew better for last than first, p<.001, note some people didn't respond in these intervals n1=24,n2=23
t.test(datbin[datbin$cid==2 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==2 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'])
# -- rew higher p=.012
# ## no difference between groups in the first block for either RR or IRT
t.test(datblock[datblock$cid==1 & datblock$bid==1,'distFromOpt'],datblock[datblock$cid==2 & datblock$bid==1,'distFromOpt'])
# -- no rew better for last than first, p<.001, note some people didn't respond in these intervals n1=24,n2=23
t.test(datbin[datbin$cid==2 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==2 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'])
# tests of distance from optimal in 10s bins
## no rew and rew are better for last than first 10s bin for RR
t.test(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==1 & datbin$bid==10 & datbin$bin10s=='(110,120]','distFromOpt'])
# -- rew better for first than last, p<.001
# ## no difference between groups in the first 10s bin for either RR or IRT
t.test(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'],datbin[datbin$cid==2 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'])
mean(datbin[datbin$cid==1 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'])
mean(datbin[datbin$cid==2 & datbin$bid==1 & datbin$bin10s=='(0,10]','distFromOpt'])
jj <- png::readPNG("AMAO_Task_Figure.png",native=TRUE)
file.choose()
im_path = "/Volumes/GoogleDrive/My Drive/CurrentDrive/LDN LAB DOCUMENTS (shared with everyone)/Mac/Project Folder/AMAO/RR/Models and Analysis/AMAO_Task_Figure.png"
#jj <- png::readPNG("AMAO_Task_Figure.png",native=TRUE)
jj <- png::readPNG(im_path,native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(jj,0,0,1,1)
# Chunk 1
# clear variables from other scripts
rm(list=ls())
## RMD options
knitr::opts_chunk$set(include = TRUE,
echo    = FALSE,
eval    = TRUE,
cache   = FALSE,
fig.height = 3.5,
fig.width = 5,
comment = '')
#knitr::knit_hooks$set(webgl = hook_webgl)
# figure customizations
tline    = .15  # title distance from plot
atline   = .45  # ax tick label distance from plot
alline   = 1.4  # axis label distance from plot
axline   = 0    # axline distance from plot
omi4=c(0,0,0,0) # outer margins
mar = c(2.9,2.9,1,1) # inner margins in lines of text
# Chunk 2: AMAO RR demographics
# see ResultsAMAOV20170908.m
# Reward group (n = 15, 11 female, mean age = 20.87, SD = 2.42)
# No Reward group (n = 15, 13 female, mean age = 22.13, SD = 4.47)
# Yoked group (n = 15, 13 female, mean age = 23.07, SD = 4.82)
# Chunk 3
#im_path = "/Volumes/GoogleDrive/My Drive/CurrentDrive/LDN LAB DOCUMENTS (shared with everyone)/Mac/Project Folder/AMAO/RR/Models and Analysis/AMAO_Task_Figure.png"
jj <- png::readPNG("AMAO_Task_Figure.png",native=TRUE)
#jj <- png::readPNG(im_path,native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(jj,0,0,1,1)
# Chunk 4: AMAORR Load and Prep Data
# partly from Results Project AMAO/AllFinalAnalyses/AnalysisForPublications.R
# load dataframe;
# full path on my laptop;
#datfile="/Volumes/GoogleDrive/My Drive/CurrentDrive/LDN LAB DOCUMENTS (shared with everyone)/Mac/Project Folder/AMAO/RR/Data Files/AMAO_RR_dataDissertation.csv"
datfile = "../Data Files/AMAO_RR_dataDissertation.csv" # works from ../Models and Analyses
dat = read.csv(datfile)
dat = dat[,!(colnames(dat)=="X")] # remove added "X" column
# checks
# dim(dat) # 326990     22 same as size(data) in MATLAB
# check for any rewards on modifying action in no rew and yoked conditions (none);
# any(dat[dat$cid==1 & dat$ams==1,]$rs) # == FALSE
# any(dat[dat$cid==4 & dat$ams==1,]$rs) # == FALSE
# Description of data;
# sids    = factor for subjects
# cid     = factor for condition, 1:no reward, 2:reward, 3:discovery (not run here), 4:yoked
# bstarti = indicator for first trial of a new block
# bs      = factor for blocks
# bts     = vector of block start times
# ts      = times of an action (all data indexed by these times)
# kp      = action that was taken, 1=AO,2=AM
# ams     = indicator for modifying action
# amrr    = response rate in 5s trailing window on am
# ammv    = am rate feedback variable
# aos     = indicator for modified action
# aorr    = response rate in 5s trailing window on ao
# aomv    = ao rate feedback variable
# act     = count of unrewarded AOs
# rs      = indicates reward was earned for this action
# cumr    = cumulative rewards earned
# sr      = schedule requirement on AO
# qchouce = reported function shape
# tsam    = time since modifying action
# tsao    = time since modified action
# amirt   = time between modifying action and the one before it (last modifying IRT)
# aoirt   = time between modified action and the one before it (last modified IRT)
# helper variables
ss= unique(dat$sid) # subject ids
cs=unique(dat$cid)  # condition ids
bs = unique(dat$bs) # block ids
# measures of interest;
# # indicator for optimal
dat$Iopt = 1-(dat$ammv<3)-(dat$ammv>7)
# # distance from optimal
dat$distFromOpt = (dat$ammv<3)*(3-dat$ammv)+(dat$ammv>7)*(dat$ammv-7)
# # 10 sec bins
dat$block_time = dat$ts-dat$bts; # compute time within blocks
dat$block_time[dat$block_time>120]=120 # adjust for small values over 120 due to logging time at beginning of a epoch
dat$bin10s = cut(dat$block_time,breaks=seq(0,120,10))
# checks;
# hist(dat$distFromOpt) # lots of 0 -> lots of optimal. 3 is max beacuse range is (0,10)
# unique(dat$distFromOpt[dat$Iopt==1]) # distFromOpt always 0 when Iopt is 1
# plot(dat$ts[dat$sids==1]-dat$bts[dat$sids==1],type='l') # time within blocks (0,120)
# sum(is.na(dat$bin10s)) # 0 -- so all responses were binned into a 10s bin
## some responses outside optimal range produced rewards
## these were likely due to rounding in the experiment code,
## or timing of saving the rr var versus computing reward within an epoch
## the range of these is very small / probably not discernable by a participant, so I ignore it
# max(dat[which(dat$rs==1 & dat$Iopt==0 & dat$cid==1),]$ammv)
# min(dat[which(dat$rs==1 & dat$Iopt==0 & dat$cid==1),]$ammv)
# get dataframe for tests using aggregate
# prop optimal and dist from optimal by participant, bin, and block
datbin  =aggregate(dat[,c('Iopt','distFromOpt')],by=list(sid=dat$sids,cid=dat$cid,bid=dat$bs,bin10s=dat$bin10s),FUN=mean)
datblock=aggregate(dat[,c('Iopt','distFromOpt')],by=list(sid=dat$sids,cid=dat$cid,bid=dat$bs),FUN=mean)
# visual checks;
# plot(datblock$Iopt~jitter(datblock$bid,factor=.5),col=datblock$cid)
# plot(datblock$distFromOpt~jitter(datblock$bid,factor=.5),col=datblock$cid)
# data for tests and visualizations
bin_means   = aggregate(  datbin[,c('Iopt','distFromOpt')],by=list(cid=datbin$cid,bid=datbin$bid,bin10s=datbin$bin10s),FUN=mean)
bin_sds     = aggregate(  datbin[,c('Iopt','distFromOpt')],by=list(cid=datbin$cid,bid=datbin$bid,bin10s=datbin$bin10s),FUN=sd)
block_means = aggregate(datblock[,c('Iopt','distFromOpt')],by=list(cid=datblock$cid,bid=datblock$bid),FUN=mean)
block_sds   = aggregate(datblock[,c('Iopt','distFromOpt')],by=list(cid=datblock$cid,bid=datblock$bid),FUN=sd)
# convert sd to SE
bin_sds[,c('Iopt','distFromOpt')]  =  bin_sds[,c('Iopt','distFromOpt')]/sqrt(15-1) # 15 in each condition here
block_sds[,c('Iopt','distFromOpt')]=block_sds[,c('Iopt','distFromOpt')]/sqrt(15-1) # 15 in each condition here
# Chunk 5: AMAORR Behavioral Results Figure
par(mfrow=c(1,1),omi=omi4,mgp=c(tline,atline,axline),mar=mar)
# condition colors (based on 4 condition version)
cols=c(rgb(0,0,0,.8),rgb(1,0,0,.8),rgb(0,.8,0,.8),rgb(0,0,1,.8))
# error bar params
sesz = 2; ll = .2;
# plotting helper functions;
plotStartVals = function(m,s,col){
points(  0,   m,cex=1.5,col=col,pch=20)
segments(0,   m+s,0,   m-s,col=col,lwd=sesz)
segments(0-ll,m-s,0+ll,m-s,col=col,lwd=sesz)
segments(0-ll,m+s,0+ll,m+s,col=col,lwd=sesz)
}
plotLines = function(m,s,col){
sems = c(m+s,rev(m-s))
lines(m,col=col,lwd=2)
polygon(c(bs,rev(bs)), sems,col=adjustcolor(col,alpha=.2), border = NA)
}
# Dist From Opt
# initialize figure
plot(x=NA,y=NA,type="n",ylim=c(0,3.5),xlim=c(0,10),ylab="",xlab="",main="Distance From Optimal R values")
title(ylab="Distance From Optimal",line=alline)#cex.lab=ftsz,
title(xlab="Block",line=alline)#cex.lab=ftsz,
# plot first 10s for each condition;
for (ci in cs){
idx = bin_means$cid==ci & bin_means$bid==1 & bin_means$bin10s=='(0,10]';
plotStartVals(bin_means$distFromOpt[idx],bin_sds$distFromOpt[idx],cols[ci]) # no reward
}
for(ci in cs){
idx = block_means$cid==ci
plotLines(block_means$distFromOpt[idx],block_sds$distFromOpt[idx],cols[ci]) # no reward
}
legend(x=2,y=3.4,c("No Reward","Reward","Yoked"),lty=c(1,1,1),lwd=c(2,2,2),
col=c(cols[1],cols[2],cols[4]),cex=.8)
# return to 1 figure
par(mfrow=c(1,1))
# tests of distance from optimal in blocks
## no rew and rew are better than yoked in last block for RR
tmp=t.test(datblock$distFromOpt[datblock$cid==1 & datblock$bid==10],datblock$distFromOpt[datblock$cid==4 & datblock$bid==10])
# Chunk 1
# clear variables from other scripts
rm(list=ls())
## RMD options
knitr::opts_chunk$set(include = TRUE,
echo    = FALSE,
eval    = TRUE,
cache   = FALSE,
fig.height = 3.5,
fig.width = 5,
comment = '')
#knitr::knit_hooks$set(webgl = hook_webgl)
# figure customizations
tline    = .15  # title distance from plot
atline   = .45  # ax tick label distance from plot
alline   = 1.4  # axis label distance from plot
axline   = 0    # axline distance from plot
omi4=c(0,0,0,0) # outer margins
mar = c(2.9,2.9,1,1) # inner margins in lines of text
# Chunk 2: AMAO RR demographics
# see ResultsAMAOV20170908.m
# Reward group (n = 15, 11 female, mean age = 20.87, SD = 2.42)
# No Reward group (n = 15, 13 female, mean age = 22.13, SD = 4.47)
# Yoked group (n = 15, 13 female, mean age = 23.07, SD = 4.82)
# Chunk 3
#im_path = "/Volumes/GoogleDrive/My Drive/CurrentDrive/LDN LAB DOCUMENTS (shared with everyone)/Mac/Project Folder/AMAO/RR/Models and Analysis/AMAO_Task_Figure.png"
jj <- png::readPNG("AMAO_Task_Figure.png",native=TRUE)
#jj <- png::readPNG(im_path,native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(jj,0,0,1,1)
# Chunk 4: AMAORR Load and Prep Data
# partly from Results Project AMAO/AllFinalAnalyses/AnalysisForPublications.R
# load dataframe;
# full path on my laptop;
datfile="/Volumes/GoogleDrive/My Drive/CurrentDrive/LDN LAB DOCUMENTS (shared with everyone)/Mac/Project Folder/AMAO/RR/Data Files/AMAO_RR_dataDissertation.csv"
#datfile = "../Data Files/AMAO_RR_dataDissertation.csv" # works from ../Models and Analyses
dat = read.csv(datfile)
dat = dat[,!(colnames(dat)=="X")] # remove added "X" column
# checks
# dim(dat) # 326990     22 same as size(data) in MATLAB
# check for any rewards on modifying action in no rew and yoked conditions (none);
# any(dat[dat$cid==1 & dat$ams==1,]$rs) # == FALSE
# any(dat[dat$cid==4 & dat$ams==1,]$rs) # == FALSE
# Description of data;
# sids    = factor for subjects
# cid     = factor for condition, 1:no reward, 2:reward, 3:discovery (not run here), 4:yoked
# bstarti = indicator for first trial of a new block
# bs      = factor for blocks
# bts     = vector of block start times
# ts      = times of an action (all data indexed by these times)
# kp      = action that was taken, 1=AO,2=AM
# ams     = indicator for modifying action
# amrr    = response rate in 5s trailing window on am
# ammv    = am rate feedback variable
# aos     = indicator for modified action
# aorr    = response rate in 5s trailing window on ao
# aomv    = ao rate feedback variable
# act     = count of unrewarded AOs
# rs      = indicates reward was earned for this action
# cumr    = cumulative rewards earned
# sr      = schedule requirement on AO
# qchouce = reported function shape
# tsam    = time since modifying action
# tsao    = time since modified action
# amirt   = time between modifying action and the one before it (last modifying IRT)
# aoirt   = time between modified action and the one before it (last modified IRT)
# helper variables
ss= unique(dat$sid) # subject ids
cs=unique(dat$cid)  # condition ids
bs = unique(dat$bs) # block ids
# measures of interest;
# # indicator for optimal
dat$Iopt = 1-(dat$ammv<3)-(dat$ammv>7)
# # distance from optimal
dat$distFromOpt = (dat$ammv<3)*(3-dat$ammv)+(dat$ammv>7)*(dat$ammv-7)
# # 10 sec bins
dat$block_time = dat$ts-dat$bts; # compute time within blocks
dat$block_time[dat$block_time>120]=120 # adjust for small values over 120 due to logging time at beginning of a epoch
dat$bin10s = cut(dat$block_time,breaks=seq(0,120,10))
# checks;
# hist(dat$distFromOpt) # lots of 0 -> lots of optimal. 3 is max beacuse range is (0,10)
# unique(dat$distFromOpt[dat$Iopt==1]) # distFromOpt always 0 when Iopt is 1
# plot(dat$ts[dat$sids==1]-dat$bts[dat$sids==1],type='l') # time within blocks (0,120)
# sum(is.na(dat$bin10s)) # 0 -- so all responses were binned into a 10s bin
## some responses outside optimal range produced rewards
## these were likely due to rounding in the experiment code,
## or timing of saving the rr var versus computing reward within an epoch
## the range of these is very small / probably not discernable by a participant, so I ignore it
# max(dat[which(dat$rs==1 & dat$Iopt==0 & dat$cid==1),]$ammv)
# min(dat[which(dat$rs==1 & dat$Iopt==0 & dat$cid==1),]$ammv)
# get dataframe for tests using aggregate
# prop optimal and dist from optimal by participant, bin, and block
datbin  =aggregate(dat[,c('Iopt','distFromOpt')],by=list(sid=dat$sids,cid=dat$cid,bid=dat$bs,bin10s=dat$bin10s),FUN=mean)
datblock=aggregate(dat[,c('Iopt','distFromOpt')],by=list(sid=dat$sids,cid=dat$cid,bid=dat$bs),FUN=mean)
# visual checks;
# plot(datblock$Iopt~jitter(datblock$bid,factor=.5),col=datblock$cid)
# plot(datblock$distFromOpt~jitter(datblock$bid,factor=.5),col=datblock$cid)
# data for tests and visualizations
bin_means   = aggregate(  datbin[,c('Iopt','distFromOpt')],by=list(cid=datbin$cid,bid=datbin$bid,bin10s=datbin$bin10s),FUN=mean)
bin_sds     = aggregate(  datbin[,c('Iopt','distFromOpt')],by=list(cid=datbin$cid,bid=datbin$bid,bin10s=datbin$bin10s),FUN=sd)
block_means = aggregate(datblock[,c('Iopt','distFromOpt')],by=list(cid=datblock$cid,bid=datblock$bid),FUN=mean)
block_sds   = aggregate(datblock[,c('Iopt','distFromOpt')],by=list(cid=datblock$cid,bid=datblock$bid),FUN=sd)
# convert sd to SE
bin_sds[,c('Iopt','distFromOpt')]  =  bin_sds[,c('Iopt','distFromOpt')]/sqrt(15-1) # 15 in each condition here
block_sds[,c('Iopt','distFromOpt')]=block_sds[,c('Iopt','distFromOpt')]/sqrt(15-1) # 15 in each condition here
# Chunk 5: AMAORR Behavioral Results Figure
par(mfrow=c(1,1),omi=omi4,mgp=c(tline,atline,axline),mar=mar)
# condition colors (based on 4 condition version)
cols=c(rgb(0,0,0,.8),rgb(1,0,0,.8),rgb(0,.8,0,.8),rgb(0,0,1,.8))
# error bar params
sesz = 2; ll = .2;
# plotting helper functions;
plotStartVals = function(m,s,col){
points(  0,   m,cex=1.5,col=col,pch=20)
segments(0,   m+s,0,   m-s,col=col,lwd=sesz)
segments(0-ll,m-s,0+ll,m-s,col=col,lwd=sesz)
segments(0-ll,m+s,0+ll,m+s,col=col,lwd=sesz)
}
plotLines = function(m,s,col){
sems = c(m+s,rev(m-s))
lines(m,col=col,lwd=2)
polygon(c(bs,rev(bs)), sems,col=adjustcolor(col,alpha=.2), border = NA)
}
# Dist From Opt
# initialize figure
plot(x=NA,y=NA,type="n",ylim=c(0,3.5),xlim=c(0,10),ylab="",xlab="",main="Distance From Optimal R values")
title(ylab="Distance From Optimal",line=alline)#cex.lab=ftsz,
title(xlab="Block",line=alline)#cex.lab=ftsz,
# plot first 10s for each condition;
for (ci in cs){
idx = bin_means$cid==ci & bin_means$bid==1 & bin_means$bin10s=='(0,10]';
plotStartVals(bin_means$distFromOpt[idx],bin_sds$distFromOpt[idx],cols[ci]) # no reward
}
for(ci in cs){
idx = block_means$cid==ci
plotLines(block_means$distFromOpt[idx],block_sds$distFromOpt[idx],cols[ci]) # no reward
}
legend(x=2,y=3.4,c("No Reward","Reward","Yoked"),lty=c(1,1,1),lwd=c(2,2,2),
col=c(cols[1],cols[2],cols[4]),cex=.8)
# return to 1 figure
par(mfrow=c(1,1))
# tests of distance from optimal in blocks
## no rew and rew are better than yoked in last block for RR
tmp=t.test(datblock$distFromOpt[datblock$cid==1 & datblock$bid==10],datblock$distFromOpt[datblock$cid==4 & datblock$bid==10])
tmp$p.value
tmp
names(tmp)
tmp$parameter
print("4",5,"6")
print(c("4",5,"6"))
print(c("4",5,"6"),sep="")
paste(c("4",5,"6"),sep="")
paste("4",5,"6")
paste("4",5,"6",sep="")
reportt = function(ttest){
t=ttest$statistic
df=ttest$parameter
p=ttest$p.value
txt = paste("t(",df,")=",t,"p=",round(p,3))
if(ttest$p.value<.001){
p="<0.001"
txt = paste("t(",df,")=",t,"p=",p)
}
return(txt)
}
reportt(tmp)
reportt = function(ttest){
t=round(ttest$statistic,3)
df=ttest$parameter
p=ttest$p.value
txt = paste("t(",df,")=",t,"p=",round(p,3))
if(ttest$p.value<.001){
p="<0.001"
txt = paste("t(",df,")=",t,"p=",p,sep="")
}
return(txt)
}
reportt(tmp)
# tests of distance from optimal in blocks
## no rew and rew are better than yoked in last block for RR
tmp=t.test(datblock$distFromOpt[datblock$cid==1 & datblock$bid==10],datblock$distFromOpt[datblock$cid==4 & datblock$bid==10],var.equal = TRUE)
reportt(tmp)
140000/8
install.packages("blogdown",dependencies = TRUE)
setwd("~/git/macstrelioff.github.io")
blogdown::new_site(theme = 'thingsym/hugo-theme-techdoc')
blogdown::new_site(theme = 'thingsym/hugo-theme-techdoc')
blogdown::hugo_build()
blogdown::hugo_build()
blogdown:::serve_site()
servr::daemon_stop(1)
servr::daemon_stop(2)
servr::daemon_stop(2)
servr::daemon_stop(3)
servr::daemon_stop(1)
servr::daemon_stop(2)
blogdown:::serve_site()
blogdown::install_hugo()
blogdown::new_site(theme = "thingsym/hugo-theme-techdoc", theme_example = TRUE)
load("~/git/macstrelioff.github.io/config.toml")
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
